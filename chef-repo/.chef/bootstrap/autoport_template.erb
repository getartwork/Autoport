bash -c '

# This is a custom bootstrap template created specifically to install chef-client on ppc64le.
# chef-client for ppc64le is not directly available as omnibus installer via opscode.com.
# Using this template, chef-client package for ppc64le architecture is downloaded and installed from autoport_repo.
# This file is created by taking into reference chef-full.erb, which is default bootstrap template used
# during knife bootstrap.

<%= "export https_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>

exists() {
  if command -v $1 &>/dev/null
  then
    return 0
  else
    return 1
  fi
}

<% if knife_config[:bootstrap_install_command] %>
  <%= knife_config[:bootstrap_install_command] %>
<% else %>
  install_sh="<%= knife_config[:bootstrap_url] ? knife_config[:bootstrap_url] : "https://www.opscode.com/chef/install.sh" %>"
  chef_ppc_rpm="chef-12.4.0~dev.0+20150519065500.git.237.2882f53-1.el7.ppc64le.rpm"
  chef_ppc_deb="chef_12.4.0~dev.0+20150519080415.git.237.2882f53-1_ppc64el.deb"


  # Checking for pre-existing chef-client installation
  if ! exists /usr/bin/chef-client; then

    # Getting architecture and distribution of the target node.
    # Based on the respective arch and platform installing chef-client using package
    # in autoport repository (or) via opscode.com using standard installation.

    ARCH=$(uname -m)
    if [ -f /etc/redhat-release ] ; then
      DIST='redhat'
      yum -y install wget
      VERSION=$(cat /etc/redhat-release | awk {"print \$7"})
      VER=$(echo $VERSION | awk -F"." {"print \$1"})
    elif [ -f /etc/centos-release ]; then
      DIST='centos'
      yum -y install wget
      VERSION=$(cat /etc/centos-release | awk {"print \$4"})
      IFS='.' read -ra VER <<< $VERSION
    elif [ -f /etc/debian_version ] ; then
      DIST=`grep DISTRIB_ID /etc/lsb-release | cut -d "=" -f 2 | tr '[A-Z]' '[a-z]'`
      apt-get -y -q install wget
      CODENAME=$(lsb_release -c | awk {"print \$2"})
    fi

    if [[ $DIST = 'redhat' && $ARCH = 'ppc64le' ]]; then
      # Installing ppc64le specific rpm for chef-client from autoport_repo.
      # autoport_repo url is resolved as current hostname, considering that chef-workstation
      # and autoport_repo are on same node, i.e. Jenkins Master.

      wget <%= Socket.ip_address_list[1].ip_address %>:90/autoport_repo/rpms/rhel/${VER[0]}/$chef_ppc_rpm
      sudo rpm -Uvh $chef_ppc_rpm
      sudo rm -rf $chef_ppc_rpm

    elif [[ $DIST = 'centos' && $ARCH = 'ppc64le' ]]; then
      # Installing ppc64le specific rpm for chef-client from autoport_repo.
      # autoport_repo url is resolved as current hostname, considering that chef-workstation
      # and autoport_repo are on same node, i.e. Jenkins Master.

      wget <%= Socket.ip_address_list[1].ip_address %>:90/autoport_repo/rpms/centos/${VER[0]}/$chef_ppc_rpm
      sudo rpm -Uvh $chef_ppc_rpm
      sudo rm -rf $chef_ppc_rpm

    elif [[ $DIST = 'ubuntu' && $ARCH = 'ppc64le' ]]; then
      # Installing ppc64le specific deb for chef-client from autoport_repo

      wget <%= Socket.ip_address_list[1].ip_address %>:90/autoport_repo/debs/ubuntu/${CODENAME}/$chef_ppc_deb
      sudo dpkg -i $chef_ppc_deb
      sudo rm -rf $chef_ppc_deb

    else
      # Installing chef-client using omnibus installer on internet hosted by opscode.com

      echo "-----> Installing Chef Omnibus (<%= latest_current_chef_version_string %>)------------"
      bash <(wget <%= "--proxy=on " if knife_config[:bootstrap_proxy] %> <%= knife_config[:bootstrap_wget_options] %> ${install_sh} -O -) <%= latest_current_chef_version_string %>
    fi
  else
    echo "----------chef-client already installed----------------"
  fi

<% end %>

<%# Following are the steps to configure keys and certificates on the client node.%>

mkdir -p /etc/chef

<% if client_pem -%>
cat > /etc/chef/client.pem <<'EOP'
<%= ::File.read(::File.expand_path(client_pem)) %>
EOP
chmod 0600 /etc/chef/client.pem
<% end -%>

<% if validation_key -%>
cat > /etc/chef/validation.pem <<'EOP'
<%= validation_key %>
EOP
chmod 0600 /etc/chef/validation.pem
<% end -%>

<% if encrypted_data_bag_secret -%>
cat > /etc/chef/encrypted_data_bag_secret <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
chmod 0600 /etc/chef/encrypted_data_bag_secret
<% end -%>

<% unless trusted_certs.empty? -%>
mkdir -p /etc/chef/trusted_certs
<%= trusted_certs %>
<% end -%>

<%# Generate Ohai Hints -%>
<% unless @chef_config[:knife][:hints].nil? || @chef_config[:knife][:hints].empty? -%>
mkdir -p /etc/chef/ohai/hints

<% @chef_config[:knife][:hints].each do |name, hash| -%>
cat > /etc/chef/ohai/hints/<%= name %>.json <<'EOP'
<%= Chef::JSONCompat.to_json(hash) %>
EOP
<% end -%>
<% end -%>

cat > /etc/chef/client.rb <<'EOP'
<%= config_content %>
EOP

cat > /etc/chef/first-boot.json <<'EOP'
<%= Chef::JSONCompat.to_json(first_boot) %>
EOP

echo "Starting first Chef Client run..."

<%= start_chef %>'
