<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>DISTRIBUTION</name>
          <description>The Linux distribution of the build server.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PACKAGE_NAME</name>
          <description/>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_TAR_REPO_LOCATION</name>
          <description>Location which contains uploaded tar information.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_TAR_INSTALL_LOCATION</name>
          <description>Location which contains installed tar information.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
     </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode></assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#
# This script will retrieve information of a package from a build server. RHEL and UBUNTU distributions are supported
# Inputs:   PACKAGE_NAME    :   names of the packages to be searched. Takes a comma separated value for multiple packages or a single package name
#           DISTRIBUTION    :   Linux distribution of the build server
# Output:   A json file with following data:
#              packageName:         name of the package
#              packageInstalled:    set to true if the package PACKAGE_NAME is installed
#              installedVersion     the installed version of the package PACKAGE_NAME. 'N/A' in case not installed.
#              updateAvailable:     set to true if a new version of the package PACKAGE_NAME is available.
#              updateVersion:       the update version of the package PACKAGE_NAME available.
#                                   If package is installed and there are no updates, 'updateVersion' takes the same value as the
#                                   'installedVersion'. If package is not installed, it takes a value of 'N/A'
#

############################### Python Script for All JSON packages starts:#########################
python_script_for_tar_listing="#!/usr/bin/python

import sys
import json
from distutils.version import LooseVersion

# package_list['installed'] is the list of tar packages installed on the node
# package_list['updates'] is the list of tar packages from jenkins master

data_file = open('packageListSingleSlave.json','r+')
managedPkgList = json.load(data_file)

package_list=json.loads(sys.argv[1])
for pkg in managedPkgList:
    if  pkg['installedVersion'] != 'N/A':
        continue
    for installedPkg in package_list['installed']:
        if pkg['packageName'] == installedPkg['packageName']:
            if 'installedVersion' in installedPkg and installedPkg['installedVersion'] != 'N/A':
                pkg['installedVersion'] = installedPkg['installedVersion']
                pkg['packageInstalled'] = True
                pkg['removableExt'] = installedPkg['packageExt']
            pkg['packageType'] = installedPkg['packageType']
            pkg['packageExt'] = installedPkg['packageExt']
            pkg['archiveName'] = installedPkg['archiveName']
            pkg['packageArch'] = installedPkg['packageArch']
            pkg['updateVersion'] = pkg['installedVersion']

    for updatePkg in package_list['updates']:
        if pkg['packageName'] == updatePkg['packageName'] and pkg['updateVersion']!='N/A' and \
           LooseVersion(pkg['updateVersion']) &lt; LooseVersion(updatePkg['updateVersion']) and \
           (updatePkg['packageArch']=='ALL' or pkg['packageArch'] == updatePkg['packageArch']):
            pkg['updateAvailable'] = True
            pkg['updateVersion'] = updatePkg['updateVersion']
            pkg['packageExt'] = updatePkg['packageExt']
            pkg['installableExt'] = updatePkg['packageExt']

data_file.seek(0)
print json.dump(managedPkgList, data_file);"

set +o noclobber # Allow overwrite of files just in case it is set to off

packageInstalled=false
updateAvailable=false
installedVersion="N/A"
updateVersion="N/A"
echo "#### Searching the list of autoport ManagedPackages"
echo "#### List of Packages being searched "$PACKAGE_NAME

echo '['>packageListSingleSlave.json
IFS=, read -a array &lt;&lt;&lt; "$PACKAGE_NAME" # split the csv of PACKAGE_NAME and save it in an array

totalCsvPackages=${#array[@]}
packageCounter=0
packageFoundCounter=0

echo "#### Iterating through the list of packages"
for packageElement in "${array[@]}"
do
    PACKAGE_NAME=$packageElement
    case $DISTRIBUTION in
        "RHEL")
            # Step 1. Check if package is installed and retrieve its version if installed.
            echo "#### Searching for Package "$PACKAGE_NAME" on "$DISTRIBUTION
            installedVersion=$(rpm -q --queryformat '%{VERSION}:%{ARCH}\n' $PACKAGE_NAME | grep `uname -m`'\|noarch' |awk -F: '{print $1}' )
            if [ ! -z $installedVersion ]
            then
                echo "#### $PACKAGE_NAME is installed. Installed version is $installedVersion"
                packageInstalled=true
            elif [ -z $installedVersion ]
            then
                echo "#### $PACKAGE_NAME is not installed."
                installedVersion="N/A"
            elif [ $? -eg 127 ]
            then
                echo "#### command not found"
            fi

            #Step 2. If package is installed, check for updates else check for its availability
            if $packageInstalled
            then
                updatePackageOutput=$(yum -q check-update $PACKAGE_NAME)
                if [ $? -eq 100 ]   #if updates are available
                then
                    updatePackageOutput=$(echo $updatePackageOutput) #this strips off whitespaces
                    if [ "${updatePackageOutput}x" != "x" ]
                    then
                        updateVersion=${updatePackageOutput#*\ }
                        updateVersion=${updateVersion%\ *}
                        echo "#### Update for \"$PACKAGE_NAME\" is available with version " $updateVersion
                        updateAvailable=true
                    fi
                    elif [ $? -eq 1 ]
                    then
                        echo "#### $PACKAGE_NAME latest version is installed."
                        updateVersion=$installedVersion
                        packageFoundCounter=$((packageFoundCounter+1))
                    fi
                    else # if package is not installed, check for available version
                        # strip the 1st line of the output of yum list
                        availablePackageOutput=$(yum -q list available $PACKAGE_NAME| sed -e '1d')
                    if [ $? -eq 0 ]
                    then
                        availablePackageOutput=$(echo $availablePackageOutput) #this strips off whitespaces
                    if [ "${availablePackageOutput}x" != "x" ]
                    then
                        updateVersion=${availablePackageOutput#*\ }
                        updateVersion=${updateVersion%\ *}
                        updateVersion=${updateVersion#*:}
                        echo "#### Package \"$PACKAGE_NAME\" is available with Version " $updateVersion
                        updateAvailable=true
                    fi
                    elif [ $? -eq 1 ]
                    then
                         echo "#### $PACKAGE_NAME not available"
                    fi
                fi
                if [ $packageCounter -eq $((totalCsvPackages -1)) ]
                then
                    seperator=""
                else
                    seperator=","
                fi
                packageCounter=$((packageCounter +1))

                printf '{"packageName":"%s","packageInstalled":%s,"installedVersion":"%s","updateAvailable":%s, "updateVersion":"%s"
                    }%s' "$PACKAGE_NAME" "$packageInstalled" "$installedVersion" "$updateAvailable" "$updateVersion" "$seperator" >> packageListSingleSlave.json
                ;;
        "UBUNTU")
            # Set variables
            packageInstalled=false
            updateAvailable=false
            installedVersion="N/A"
            updateVersion="N/A"
            lineNumber=1
            echo "#### Searching for Package "$PACKAGE_NAME" on "$DISTRIBUTION
            apt-cache policy $PACKAGE_NAME > singlePackageInformation.txt

            while read i
            do
                 i=$( echo $i | tr -d '[[:space:]]') #trim spaces
                 if [ $lineNumber -eq 2 ]    # Installed information #If package is not found, control will never reach here.
                 then
                    i=${i##*:}  #extract version number, occurs after the colon
                    if [ $i != "(none)" ]
                    then
                        echo "#### $PACKAGE_NAME is installed. Installed version is $installedVersion"
                        packageInstalled=true
                        installedVersion=$i
                    fi
                    elif [ $lineNumber -eq 3 ] # Update Available information # If package is not found, control will never reach here.
                    then
                        i=${i##*:}  #extract version number, occurs after the colon
                        if [ $i != $installedVersion ]
                        then
                            echo "#### Update for \"$PACKAGE_NAME\" is available with version " $updateVersion
                            updateAvailable=true
                            updateVersion=$i
                        else
                            echo "#### $PACKAGE_NAME latest version is installed."
                            updateVersion=$installedVersion
                            packageFoundCounter=$((packageFoundCounter+1))
                        fi
                    fi
                    lineNumber=$((lineNumber+1))
            done &lt; singlePackageInformation.txt

            rm -f singlePackageInformation.txt
            if [ $packageCounter -eq $((totalCsvPackages -1)) ]
            then
                seperator=""
            else
                seperator=","
            fi
            packageCounter=$((packageCounter +1))

            printf '{"packageName":"%s","packageInstalled":%s,"installedVersion":"%s","updateAvailable":%s,"updateVersion":"%s"
                }%s' "$PACKAGE_NAME" "$packageInstalled" "$installedVersion" "$updateAvailable" "$updateVersion" "$seperator" >> packageListSingleSlave.json
        ;;
    esac
done

echo ']'>>packageListSingleSlave.json


jenkins_repo_file_name="archive.log"
echo "#### Fetching list of available source packages"
available_package_json=''
type wget
can_continue=$?

if [ $can_continue -ne 0 ]; then
    echo "Error: Wget is not installed on this system, installing \"wget\"."
    # Installing wget from yum repository
    case $DISTRIBUTION in
        "UBUNTU")
            sudo apt-get -y --force-yes install wget
        ;;
        "RHEL")
            yum -y install wget
        ;;
    esac
fi
# Get the Tar repo file from server
wget $(echo "$JENKINS_TAR_REPO_LOCATION/$jenkins_repo_file_name" )

# Now since wget is installed we can proceed downloading file and continue the operation.
if [ -f "$jenkins_repo_file_name" ]; then
    # If repo file is found search the package in the repo.
    counter=0
    # Now read line by line from the file from the jenkins repos and prepare the list of tar files available
    while IFS='' read -r line || [[ -n $line ]]; do
        IFS=', ' read -a package_info &lt;&lt;&lt; "$line"
        echo "#### "${package_info[0]}" is available. Available version is "${package_info[1]}
        package_json="{\"packageName\":\"${package_info[0]}\",
            \"summary\":\"${package_info[6]}\",
            \"installedVersion\":\"N/A\",
            \"packageInstalled\":\"false\",
            \"updateVersion\":\"${package_info[1]}\",
            \"updateAvailable\":\"true\",
            \"packageType\":\"${package_info[2]}\",
            \"packageArch\":\"${package_info[4]}\",
            \"packageExt\":\"${package_info[5]}\",
            \"archiveName\":\"${package_info[6]}\"}"



        if [ $counter -gt 0 ]; then
            available_package_json=$(echo $available_package_json,$package_json)
        else
            available_package_json=$(echo $package_json)
        fi
        counter=$((counter + 1))
    done &lt; "$jenkins_repo_file_name"
    echo "#### Done: Fetching list of available source packages!"
else
    # Tar repo file is not found, display the error message.
    echo "Error: File archive.log not found."
fi

rm -f $jenkins_repo_file_name

local_repo_file_name="$JENKINS_TAR_INSTALL_LOCATION/$jenkins_repo_file_name"
installed_package_json=''
if [ -f "$local_repo_file_name" ];then
    counter=0
    echo "#### Fetching list of installed source packages"
    # Next read line by line from the local repo file and prepare the list of tar files installed
    while IFS='' read -r line || [[ -n $line ]]; do
        IFS=', ' read -a package_info &lt;&lt;&lt; "$line"
        echo "#### "${package_info[0]}" is installed. Installed version is "${package_info[1]}
        package_json="{\"packageName\":\"${package_info[0]}\",
            \"summary\":\"${package_info[6]}\",
            \"installedVersion\":\"${package_info[1]}\",
            \"packageInstalled\":\"true\",
            \"updateVersion\":\"N/A\",
            \"updateAvailable\":\"false\",
            \"packageType\":\"${package_info[2]}\",
            \"packageArch\":\"${package_info[4]}\",
            \"packageExt\":\"${package_info[5]}\",
            \"archiveName\":\"${package_info[6]}\"}"
        if [ $counter -gt 0 ]; then
            installed_package_json=$(echo $installed_package_json,$package_json)
        else
            installed_package_json=$(echo $package_json)
        fi
        counter=$((counter + 1))
    done &lt; "$local_repo_file_name"
    echo "#### Done: Fetching list of installed source packages!"
fi
package_list=$( echo "{\"installed\": [$installed_package_json], \"updates\": [$available_package_json]}" )

# Dump to python script for execution.
echo "$python_script_for_tar_listing" > tar_packages.py


tar_packages=$( python tar_packages.py "$package_list")
# Remove temporary file as its not needed any more.
rm tar_packages.py
echo "#### Completed fetching data for all packages."

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.json</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
</project>
