<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>7</daysToKeep>
    <numToKeep>3000</numToKeep>
    <artifactDaysToKeep>7</artifactDaysToKeep>
    <artifactNumToKeep>3000</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.12.0">
      <projectUrl></projectUrl>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>META_NAME</name>
          <description>Job profile file name</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>META_CONTENTS</name>
          <description>Job parameters</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HOSTNAME</name>
          <description>Hostname of build server</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>IPADDR</name>
          <description>IPADDR of build server</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OSNAME</name>
          <description>OS Name Version PLatform of build server</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CMDENV</name>
          <description>Calculated environment variables</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECTNAME</name>
          <description>Project name</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECTVERS</name>
          <description>Project branch name or release tag</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CMD1</name>
          <description>Command to build the project</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CMD2</name>
          <description>Command to test the project</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CMD3</name>
          <description>Command to install the project to resolve a dependency in a batch file or a command to tar the project for packaging</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.libvirt.BeforeJobSnapshotJobProperty plugin="libvirt-slave@1.8.5"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url></url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name></name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode></assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.0"/>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
                 if [ ! -d .autoport-scratch ]; then
                     mkdir .autoport-scratch
                 fi
                 echo "*" &gt; .autoport-scratch/.gitignore
                 echo $META_CONTENTS &gt; .autoport-scratch/$META_NAME</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
              if [ -n &quot;$CMD1&quot; ]; then
                 ARTI=".autoport-scratch/build_result.arti"
                 echo &quot;Autoport HOST:   $HOSTNAME&quot; &gt; $ARTI
                 echo &quot;Autoport IPADDR: $IPADDR&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport O/S:    $OSNAME&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport PATH:   $PATH&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport ENV:    $CMDENV&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport PROJ:   $PROJECTNAME&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport VERS:   $PROJECTVERS&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport CMD:    $CMD1&quot; &gt;&gt; $ARTI
                 echo &quot;&quot; &gt;&gt; $ARTI
                 echo $CMD1 | tee .autoport-scratch/autoport_build_cmd;
                 chmod a+x .autoport-scratch/autoport_build_cmd;
                 ./.autoport-scratch/autoport_build_cmd &gt;&gt; $ARTI 2&gt;&amp;1;
              fi</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
              if [ -n &quot;$CMD2&quot; ]; then
                 ARTI=".autoport-scratch/test_result.arti"
                 echo &quot;Autoport HOST:   $HOSTNAME&quot; &gt; $ARTI
                 echo &quot;Autoport IPADDR: $IPADDR&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport O/S:    $OSNAME&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport PATH:   $PATH&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport ENV:    $CMDENV&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport PROJ:   $PROJECTNAME&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport VERS:   $PROJECTVERS&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport CMD:    $CMD2&quot; &gt;&gt; $ARTI
                 echo &quot;&quot; &gt;&gt; $ARTI
                 echo $CMD2 | tee .autoport-scratch/autoport_test_cmd;
                 chmod a+x .autoport-scratch/autoport_test_cmd;
                 ./.autoport-scratch/autoport_test_cmd &gt;&gt; $ARTI 2&gt;&amp;1;
              fi</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
              if [ -n &quot;$CMD3&quot; ]; then
                 ARTI=".autoport-scratch/install_result.arti"
                 echo &quot;Autoport HOST:   $HOSTNAME&quot; &gt; $ARTI
                 echo &quot;Autoport IPADDR: $IPADDR&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport O/S:    $OSNAME&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport PATH:   $PATH&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport ENV:    $CMDENV&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport PROJ:   $PROJECTNAME&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport VERS:   $PROJECTVERS&quot; &gt;&gt; $ARTI
                 echo &quot;Autoport CMD:    $CMD3&quot; &gt;&gt; $ARTI
                 echo &quot;&quot; &gt;&gt; $ARTI
                 echo $CMD3 | tee .autoport-scratch/autoport_install_cmd;
                 chmod a+x .autoport-scratch/autoport_install_cmd;
                 ./.autoport-scratch/autoport_install_cmd &gt;&gt; $ARTI 2&gt;&amp;1;
              fi</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.autoport-scratch/*.arti</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Archiving artifacts</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>true</RunIfJobSuccessful>
          <script>#!/bin/bash
# This script keeps the most recent KEEPBUILDS number of builds

# For example, if KEEPBUILDS=75 and there are 100 builds, it will
# remove the oldest 25 builds.

KEEPBUILDS=125

cwd=`pwd`
cd ..
pwd

echo &quot;Current directory: $cwd&quot;

numBuilds=`ls -crd * | wc -l`
buildsToRemove=$((numBuilds-$KEEPBUILDS))
if [ $buildsToRemove -lt 0 ]; then
    buildsToRemove=0
fi

echo &quot;Total number of builds: $numBuilds&quot;
echo &quot;Number of builds to remove: $buildsToRemove&quot;

if [ $buildsToRemove -gt 0 ]; then
    removeList=`ls -crd * | head -n $buildsToRemove`

    echo &quot;----- Start removeList ----- &quot;
    for i in $removeList
    do
        ls -ld $i
        sudo rm -rf $i
    done
    echo &quot;----- End removeList ----- &quot;
fi
          </script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
  </publishers>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@1.91.3">
      <info>
        <propertiesContent></propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>
