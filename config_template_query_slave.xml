<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>7</daysToKeep>
    <numToKeep>3000</numToKeep>
    <artifactDaysToKeep>7</artifactDaysToKeep>
    <artifactNumToKeep>3000</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NODE</name>
          <description>The target node</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ACTION</name>
          <description>The action to be performed</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.libvirt.BeforeJobSnapshotJobProperty plugin="libvirt-slave@1.8.5"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode></assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
#!/bin/sh
#
# This script will invoke a command on the build server. RHEL and UBUNTU distributions are supported
# Inputs:   ACTION        &quot;query-os&quot;     Query basic O/S parameters
#           NODE                         NodeLabel for current node
#
# Output:   A json file for &quot;query-os&quot; containing the following fields:
#           distro:                      RHEL or Ubuntu
#           rel:                         Distribution Release
#           vers:                        Distribution Version
#           arch:                        Processor Architecture
#           hostname:                    Short hostname
#           nodelabel:                   Jenkins node label
#           ipaddress:                   Jenkins node ipaddress

set +o noclobber # Allow overwrite of files just in case it is set to off
set +x

uname -a

echo &quot;NODE: &quot; $NODE
echo &quot;ACTION: &quot; $ACTION

DISTRIBUTION=&quot;UBUNTU&quot;
if [ -e /etc/centos-release ] ; then
    DISTRIBUTION=&quot;CENTOS&quot;
elif [ -e /etc/redhat-release ] ; then
    DISTRIBUTION=&quot;RHEL&quot;
fi

echo &quot;DISTRIBUTION: &quot; $DISTRIBUTION

IPADDR=$(python - &lt;&lt;-EOF
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# Does not send packets, just creates a connection to
# DNS server of Google
s.connect(( &quot;www.github.com&quot;, 80))
print s.getsockname()[0]
s.close
EOF
)

case $ACTION in
    &quot;query-os&quot;)
        case $DISTRIBUTION in
             &quot;CENTOS&quot;)
                 cat /etc/centos-release
                 DISTRO=&apos;&quot;distro&quot;: &quot;CentOS&quot;&apos;
                 REL=`cat /etc/centos-release | awk &apos;{print $4}&apos;`
                 VER=`cat /etc/centos-release | awk &apos;{print $4}&apos;`
                 ;;
             &quot;RHEL&quot;)
                 cat /etc/redhat-release
                 rpm -qa | grep redhat-release
                 DISTRO=&apos;&quot;distro&quot;: &quot;RHEL&quot;&apos;
                 REL1=`rpm -q --queryformat &apos;%{VERSION}&apos; $(rpm -qa &apos;(redhat)-release(|-server|-workstation|-client|-computenode)&apos;)`
                 echo &quot;REL1&quot;=$REL1
                 REL=`cat /etc/redhat-release | awk &apos;{print $7}&apos;`
                 VER=`cat /etc/redhat-release | awk &apos;{print $7}&apos;`
                 ;;
             &quot;UBUNTU&quot;)
                 lsb_release -i -r
                 cat /etc/issue
                 DISTRO=&apos;&quot;distro&quot;: &quot;UBUNTU&quot;&apos;
                 REL=`lsb_release -r | awk &apos;{print $2}&apos;`
                 VER=`cat /etc/issue | awk &apos;NR==1{print $2}&apos;`
                 ;;
        esac

        ARCH=`uname -m`
        HOSTNAME=`hostname`
        echo &quot;{$DISTRO, \&quot;rel\&quot;: \&quot;$REL\&quot;,\&quot;version\&quot;: \&quot;$VER\&quot;, \&quot;arch\&quot;: \&quot;$ARCH\&quot;, \&quot;hostname\&quot;: \&quot;$HOSTNAME\&quot;, \&quot;nodelabel\&quot;: \&quot;$NODE\&quot;, \&quot;ipaddress\&quot;: \&quot;$IPADDR\&quot;}&quot; &gt; $ACTION.json
        ;;
esac

if [ -e $ACTION.json ] ; then
    cat $ACTION.json
else
    echo &quot;No command artifacts produced!&quot;
fi

exit 0
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.json</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Archiving artifacts</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>true</RunIfJobSuccessful>
          <script>
#!/bin/bash
# This script removes the current project from the build slave.   This script is invoked after the results have been archived
cwd=`pwd`
cd ..
pwd
echo &quot;Removing project: $cwd&quot;
rm -rf $cwd</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
  </publishers>
  <buildWrappers/>
</project>
